"use strict";exports.id=21,exports.ids=[21],exports.modules={8021:(e,t,r)=>{r.d(t,{EventStreamSerde:()=>i});var s=r(2802),n=r(3767);class i{marshaller;serializer;deserializer;serdeContext;defaultContentType;constructor({marshaller:e,serializer:t,deserializer:r,serdeContext:s,defaultContentType:n}){this.marshaller=e,this.serializer=t,this.deserializer=r,this.serdeContext=s,this.defaultContentType=n}async serializeEventStream({eventStream:e,requestSchema:t,initialRequest:r}){const s=this.marshaller,n=t.getEventStreamMember(),i=t.getMemberSchema(n),a=(i.getMemberSchemas(),this.serializer),o=this.defaultContentType,l=Symbol("initialRequestMarker"),c={async*[Symbol.asyncIterator](){if(r){const e={":event-type":{type:"string",value:"initial-request"},":message-type":{type:"string",value:"event"},":content-type":{type:"string",value:o}};a.write(t,r);const s=a.flush();yield{[l]:!0,headers:e,body:s}}for await(const t of e)yield t}};return s.serialize(c,(e=>{if(e[l])return{headers:e.headers,body:e.body};const t=Object.keys(e).find((e=>"__type"!==e))??"",{additionalHeaders:r,body:s,eventType:n,explicitPayloadContentType:a}=this.writeEventBody(t,i,e);return{headers:{":event-type":{type:"string",value:n},":message-type":{type:"string",value:"event"},":content-type":{type:"string",value:a??o},...r},body:s}}))}async deserializeEventStream({response:e,responseSchema:t,initialResponseContainer:r}){const s=this.marshaller,n=t.getEventStreamMember(),i=t.getMemberSchema(n).getMemberSchemas(),a=Symbol("initialResponseMarker"),o=s.deserialize(e.body,(async e=>{const r=Object.keys(e).find((e=>"__type"!==e))??"";if("initial-response"===r){const s=await this.deserializer.read(t,e[r].body);return delete s[n],{[a]:!0,...s}}if(r in i){const t=i[r];return{[r]:await this.deserializer.read(t,e[r].body)}}return{$unknown:e}})),l=o[Symbol.asyncIterator](),c=await l.next();if(c.done)return o;if(c.value?.[a]){if(!t)throw new Error("@smithy::core/protocols - initial-response event encountered in event stream but no response schema given.");for(const[e,t]of Object.entries(c.value))r[e]=t}return{async*[Symbol.asyncIterator](){for(c?.value?.[a]||(yield c.value);;){const{done:e,value:t}=await l.next();if(e)break;yield t}}}}writeEventBody(e,t,r){const i=this.serializer;let a,o=e,l=null;const c={};if(t.hasMemberSchema(e)){const s=t.getMemberSchema(e);if(!s.isStructSchema())throw new Error("@smithy/core/event-streams - non-struct member not supported in event stream union.");for(const[t,n]of s.structIterator()){const{eventHeader:s,eventPayload:i}=n.getMergedTraits();if(i){l=t;break}if(s){const s=r[e][t];let i="binary";n.isNumericSchema()?i=(-2)**31<=s&&s<=2**31-1?"integer":"long":n.isTimestampSchema()?i="timestamp":n.isStringSchema()?i="string":n.isBooleanSchema()&&(i="boolean"),null!=s&&(c[t]={type:i,value:s},delete r[e][t])}}if(null!==l){const t=s.getMemberSchema(l);t.isBlobSchema()?a="application/octet-stream":t.isStringSchema()&&(a="text/plain"),i.write(t,r[e][l])}else i.write(s,r[e])}else{const[t,n]=r[e];o=t,i.write(s.Y.DOCUMENT,n)}const d=i.flush();return{body:"string"==typeof d?(this.serdeContext?.utf8Decoder??n.fromUtf8)(d):d,eventType:o,explicitPayloadContentType:a,additionalHeaders:c}}}}};